<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Manage Users</title>
    <!-- Ant Design CSS CDN -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/antd/4.24.8/antd.min.css"
      integrity="sha512-zWswk...hash..."
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <div class="container mx-auto my-10 p-6 bg-white rounded-lg shadow-md">
      <!-- Title -->
      <h1 class="text-3xl font-bold text-purple-600 mb-4">Manage Users</h1>
      <p class="text-gray-500 mb-6">Manage and organize your users</p>

      <!-- Filters -->
      <div class="grid grid-cols-2 gap-4 mb-6">
        <select
          id="nameFilter"
          class="ant-select w-full"
          onchange="applyFilters()"
        >
          <option value="">Filter by Name</option>
          <% const uniqueStatuses = [...new Set(users.map(user => user.name))];
          uniqueStatuses.forEach(name => { %>
          <option value="<%= name %>"><%= name %></option>
          <% }) %>
        </select>
        <select
          id="emailFilter"
          class="ant-select w-full"
          onchange="applyFilters()"
        >
          <option value="">Filter by Email</option>
          <% const uniqueStatusess = [...new Set(users.map(user =>
          user.email))]; uniqueStatusess.forEach(email => { %>
          <option value="<%= email %>"><%= email %></option>
          <% }) %>
        </select>
      </div>

      <!-- Ant Design Table -->
      <div class="ant-table-wrapper">
        <table id="userTable" class="ant-table ant-table-bordered w-full">
          <!-- Table Header -->
          <thead class="ant-table-thead">
            <tr>
              <th onclick="sortTable(0)">
                Name <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(1)">
                Username <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(2)">
                Email <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(3)">
                Account Number <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(4)">
                Balance <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(5)">
                Branch <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTable(6)">
                Swift Code <span class="sort-icon">▲▼</span>
              </th>
              <th onclick="sortTime()">
                Created At <span class="sort-icon">▲▼</span>
              </th>
              <th>Status<span class="sort-icon"></span></th>
            </tr>
          </thead>

          <!-- Table Body -->
          <tbody id="userTableBody" class="ant-table-tbody">
            <% users.forEach(user => { %>
            <tr>
              <td class="border px-4 py-2"><%= user.name %></td>
              <td class="border px-4 py-2">
                <a
                  href="/user-profile?username=<%= user.username %>"
                  style="text-decoration: underline; color: blue"
                >
                  <%= user.username %>
                </a>
              </td>
              <td class="border px-4 py-2"><%= user.email %></td>
              <td class="border px-4 py-2"><%= user.account %></td>
              <td class="border px-4 py-2"><%= user.balance %></td>
              <td class="border px-4 py-2"><%= user.branch %></td>
              <td class="border px-4 py-2"><%= user.swift %></td>
              <td
                class="border px-4 py-2"
                data-created-at="<%= user.createdAt %>"
              >
                <%= new Date(user.createdAt).toLocaleDateString('en-GB') %>
              </td>
              <td><%= user.isBanned ? "Banned" : "Active" %></td>
              <td>
                <% if (user.username === currentUser) { %>
                <button disabled class="ant-btn ant-btn-danger">Ban</button>
                <% } else { %>
                <form method="POST" action="/accounts/ban">
                  <input
                    type="hidden"
                    name="username"
                    value="<%= user.username %>"
                  />
                  <button
                    type="submit"
                    class="ant-btn <%= user.isBanned ? 'ant-btn-primary' : 'ant-btn-danger' %>"
                  >
                    <%= user.isBanned ? "Unban" : "Ban" %>
                  </button>
                </form>
                <% } %>
              </td>
            </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>

    <script>
      let sortOrder = {}; // Store sort order for each column
      function sortTime() {
        const tableBody = document.getElementById("userTableBody");
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        const columnIndex = 7;
        sortOrder[columnIndex] = !sortOrder[columnIndex];

        rows.sort((a, b) => {
          const aDate = new Date(a.children[columnIndex].dataset.createdAt);
          const bDate = new Date(b.children[columnIndex].dataset.createdAt);
          return sortOrder[columnIndex] ? aDate - bDate : bDate - aDate;
        });

        rows.forEach((row) => tableBody.appendChild(row));

        // Update the URL with sorting parameters
        const url = new URL(window.location.href);
        const sortDirection = sortOrder[columnIndex] ? "asc" : "desc";

        url.searchParams.set("sort", "createat");
        url.searchParams.set("order", sortDirection);

        window.history.replaceState({}, "", url);
      }
      function sortTable(columnIndex) {
        const tableBody = document.getElementById("userTableBody");
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        // Toggle sort order
        sortOrder[columnIndex] = !sortOrder[columnIndex];

        rows.sort((a, b) => {
          const aText = a.children[columnIndex].textContent.trim();
          const bText = b.children[columnIndex].textContent.trim();

          if (!isNaN(aText) && !isNaN(bText)) {
            // Compare numeric values
            return sortOrder[columnIndex] ? aText - bText : bText - aText;
          }

          // Compare string values
          return sortOrder[columnIndex]
            ? aText.localeCompare(bText)
            : bText.localeCompare(aText);
        });

        // Re-append sorted rows to the table body
        rows.forEach((row) => tableBody.appendChild(row));

        // Update URL with sorting parameters
        const url = new URL(window.location.href);
        const sortColumn = tableBody.parentElement
          .querySelectorAll("thead th")
          [columnIndex].textContent.trim()
          .slice(0, -3);
        const sortDirection = sortOrder[columnIndex] ? "asc" : "desc";

        url.searchParams.set("sort", sortColumn.toLowerCase());
        url.searchParams.set("order", sortDirection);

        window.history.replaceState({}, "", url);
      }

      function applyFilters() {
        const nameFilterValue = document.getElementById("nameFilter").value;
        const emailFilterValue = document.getElementById("emailFilter").value;
        const rows = document.querySelectorAll("#userTableBody tr");

        rows.forEach((row) => {
          const nameCell = row.children[0].textContent; // Name column
          const emailCell = row.children[2].textContent; // Email column

          const nameMatches = !nameFilterValue || nameCell === nameFilterValue;
          const emailMatches =
            !emailFilterValue || emailCell === emailFilterValue;

          // Display row only if all conditions are met
          row.style.display = nameMatches && emailMatches ? "" : "none";
        });

        // Update the URL with query parameters
        const url = new URL(window.location.href);
        if (nameFilterValue) {
          url.searchParams.set("name", nameFilterValue);
        } else {
          url.searchParams.delete("name");
        }
        if (emailFilterValue) {
          url.searchParams.set("email", emailFilterValue);
        } else {
          url.searchParams.delete("email");
        }
        window.history.replaceState({}, "", url);
      }

      // Populate filters and sort state on page load based on URL parameters
      document.addEventListener("DOMContentLoaded", () => {
        const urlParams = new URLSearchParams(window.location.search);
        const nameFilterValue = urlParams.get("name");
        const emailFilterValue = urlParams.get("email");
        const sortColumn = urlParams.get("sort");
        const sortDirection = urlParams.get("order");

        if (nameFilterValue) {
          document.getElementById("nameFilter").value = nameFilterValue;
        }
        if (emailFilterValue) {
          document.getElementById("emailFilter").value = emailFilterValue;
        }

        applyFilters();

        if (sortColumn && sortDirection) {
          const columnIndex = Array.from(
            document.querySelectorAll("thead th")
          ).findIndex(
            (th) => th.textContent.trim().toLowerCase() === sortColumn
          );

          if (columnIndex >= 0) {
            sortOrder[columnIndex] = sortDirection === "asc";
            sortTable(columnIndex);
          }
        }
      });
    </script>
  </body>
</html>
