<div class="container mx-auto my-10 p-10 bg-white rounded-xl shadow-lg">
  <!-- Title -->
  <h1 class="text-4xl font-extrabold text-blue-600 mb-6">Manage Users</h1>
  <p class="text-lg text-gray-600 mb-8">Easily manage and organize your user list below</p>

  <!-- Filters -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    <div>
      <select id="usernameFilter"
        class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-base p-2"
        onchange="applyFilters()">
        <option value="">Filter by Username</option>
        <% const uniqueUsernames=[...new Set(users.map(user=> user.username.trim()))]; %>
          <% uniqueUsernames.forEach(username=> { %>
            <option value="<%= username %>">
              <%= username %>
            </option>
            <% }); %>
      </select>
    </div>

    <div>
      <select id="emailFilter"
        class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-base p-2"
        onchange="applyFilters()">
        <option value="">Filter by Email</option>
        <% const uniqueEmails=[...new Set(users.map(user=> user.email.trim()))]; %>
          <% uniqueEmails.forEach(email=> { %>
            <option value="<%= email %>">
              <%= email %>
            </option>
            <% }); %>
      </select>
    </div>
  </div>

  <!-- Ant Design Table -->
  <div class="overflow-x-auto rounded-lg shadow-lg">
    <table class="min-w-full bg-white divide-y divide-gray-200">
      <!-- Table Header -->
      <thead class="bg-purple-50">
        <tr>
          <th scope="col"
            class="px-6 py-3 text-left text-base font-bold text-blue-600 tracking-wider cursor-pointer hover:text-blue-800"
            onclick="sortTable(0)">
            Username
          </th>
          <th scope="col"
            class="px-6 py-3 text-left text-base font-bold text-blue-600 tracking-wider cursor-pointer hover:text-blue-800"
            onclick="sortTable(1)">
            Email
          </th>
          <th scope="col"
            class="px-6 py-3 text-left text-base font-bold text-blue-600 tracking-wider cursor-pointer hover:text-blue-800"
            onclick="sortTime()">
            Created At
          </th>
          <th scope="col" class="px-6 py-3 text-left text-base font-bold text-blue-600 tracking-wider">
            Action
          </th>
          <th scope="col" class="px-6 py-3 text-left text-base font-bold text-blue-600 tracking-wider">
            Ban/Unban
          </th>
        </tr>
      </thead>

      <!-- Table Body -->
      <tbody id="userTableBody" class="divide-y divide-gray-200">
        <% users.forEach(user=> { %>
          <tr class="hover:bg-purple-50">
            <td class="px-6 py-4 whitespace-nowrap text-base text-gray-800">
              <%= user.username %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-base text-gray-600">
              <%= user.email %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-base text-gray-500" data-created-at="<%= user.createdAt %>">
              <%= new Date(user.createdAt).toLocaleDateString('en-GB') %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-base text-blue-600">
              <a href="/accounts/<%= user._id %>" class="text-blue-500 hover:underline">
                View
              </a>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-base text-center">
              <% if (user.isBanned) { %>
                <button onclick="toggleBan('<%= user._id %>', false)"
                  class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
                  Unban
                </button>
                <% } else { %>
                  <button onclick="toggleBan('<%= user._id %>', true)"
                    class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
                    Ban
                  </button>
                  <% } %>
            </td>
          </tr>
          <% }); %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div id="pagination" class="flex justify-center mt-6">
    <% if (currentPage> 1) { %>
      <button class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100"
        onclick="fetchPage('<%= currentPage - 1 %>')">
        Previous
      </button>
      <% } %>

        <% for (let i=1; i <=totalPages; i++) { %>
          <button class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100" onclick="fetchPage('<%= i %>')"
            <% if (i===currentPage) { %> style="background-color: #e5e7eb;" <% } %>>
              <%= i %>
          </button>
          <% } %>

            <% if (currentPage < totalPages) { %>
              <button class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100"
                onclick="fetchPage('<%= currentPage + 1 %>')">
                Next
              </button>
              <% } %>
  </div>

</div>

<script>
  let sortOrder = {};

    // Function to sort the "Created At" column
    function sortTime() {
      const tableBody = document.getElementById("userTableBody");
      const rows = Array.from(tableBody.querySelectorAll("tr"));
      const columnIndex = 2; // "Created At" column index
      sortOrder[columnIndex] = !sortOrder[columnIndex];

      rows.sort((a, b) => {
        const aDate = new Date(a.children[columnIndex].dataset.createdAt);
        const bDate = new Date(b.children[columnIndex].dataset.createdAt);
        return sortOrder[columnIndex] ? aDate - bDate : bDate - aDate;
      });

      rows.forEach(row => tableBody.appendChild(row));
      updateURL("sort", "createdat");
      updateURL("order", sortOrder[columnIndex] ? "asc" : "desc");
    }

    // Function to sort the table by Username or Email
    function sortTable(columnIndex) {
      const tableBody = document.getElementById("userTableBody");
      const rows = Array.from(tableBody.querySelectorAll("tr"));
      sortOrder[columnIndex] = !sortOrder[columnIndex];

      rows.sort((a, b) => {
        const aText = a.children[columnIndex].textContent.trim();
        const bText = b.children[columnIndex].textContent.trim();
        return sortOrder[columnIndex] ? aText.localeCompare(bText) : bText.localeCompare(aText);
      });

      rows.forEach(row => tableBody.appendChild(row));
      const sortColumn = columnIndex === 0 ? "username" : "email";
      updateURL("sort", sortColumn);
      updateURL("order", sortOrder[columnIndex] ? "asc" : "desc");
    }

    // Function to apply filters
    function applyFilters() {
        const usernameFilterValue = document.getElementById("usernameFilter").value.trim();
        const emailFilterValue = document.getElementById("emailFilter").value.trim();
        const rows = document.querySelectorAll("#userTableBody tr");

        rows.forEach(row => {
          const usernameCell = row.children[0].textContent.trim();
          const emailCell = row.children[1].textContent.trim();

          const usernameMatches = !usernameFilterValue || usernameCell.toLowerCase() === usernameFilterValue.toLowerCase();
          const emailMatches = !emailFilterValue || emailCell.toLowerCase() === emailFilterValue.toLowerCase();

          row.style.display = usernameMatches && emailMatches ? "" : "none";
        });

        // Update the URL with the new filters
        if (usernameFilterValue || emailFilterValue) {
          updateURL("filter", "true");
        } else {
          updateURL("filter", null);
        }

        // Removed the recursive call
        updateURL("username", usernameFilterValue);
        updateURL("email", emailFilterValue);
      }

    // Initialize filters and sorting based on URL parameters
    document.addEventListener("DOMContentLoaded", () => {
        const urlParams = new URLSearchParams(window.location.search);

        // Lấy giá trị từ URL
        const usernameFilterValue = urlParams.get("username");
        const emailFilterValue = urlParams.get("email");
        const sortColumn = urlParams.get("sort");
        const sortDirection = urlParams.get("order");
        const currentPage = urlParams.get("page") || 1;

        // Áp dụng giá trị cho các bộ lọc
        if (usernameFilterValue) {
          document.getElementById("usernameFilter").value = usernameFilterValue;
        }
        if (emailFilterValue) {
          document.getElementById("emailFilter").value = emailFilterValue;
        }

        // Áp dụng bộ lọc
        applyFilters();

        // Áp dụng sắp xếp nếu có
        if (sortColumn && sortDirection) {
          const columnIndex = sortColumn === "username" ? 0 : sortColumn === "email" ? 1 : 2;
          sortOrder[columnIndex] = sortDirection === "asc";
          if (columnIndex === 2) sortTime();
          else sortTable(columnIndex);
        }

        // Tải trang hiện tại
        fetchPage(currentPage);
      });

      function updateURL(param, value) {
          const url = new URL(window.location.href);

          // Cập nhật hoặc xóa tham số
          if (value) {
            url.searchParams.set(param, value);
          } else {
            url.searchParams.delete(param);
          }
          // Truyền URL mới vào window.location
          window.history.replaceState({}, "", url);
        }

      // Hàm fetchPage đã sửa để cập nhật URL:
      async function fetchPage(page) {
        const usernameFilter = document.getElementById("usernameFilter").value.trim();
        const emailFilter = document.getElementById("emailFilter").value.trim();

        const params = new URLSearchParams(window.location.search);
        params.set("page", page);
        if (usernameFilter) params.set("username", usernameFilter);
        if (emailFilter) params.set("email", emailFilter);

        try {
          const response = await fetch(`/api/accounts?${params.toString()}`);
          const data = await response.json();

          if (response.ok) {
            updateTable(data.users);
            updatePagination(data.currentPage, data.totalPages);
            updateURL("page", page);
          } else {
            console.error("Failed to fetch users:", data.message);
          }
        } catch (error) {
          console.error("Error:", error);
        }
      }

  function updateTable(users) {
      const tbody = document.getElementById("userTableBody");
      tbody.innerHTML = ""; // Xóa dữ liệu cũ

      users.forEach(user => {
        const banButton = user.isBanned
          ? `<button onclick="toggleBan('${user._id}', false)"
           class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
           Unban
         </button>`
          : `<button onclick="toggleBan('${user._id}', true)"
           class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
           Ban
         </button>`;

        const row = `
      <tr class="hover:bg-purple-50">
        <td class="px-6 py-4 whitespace-nowrap text-base text-gray-800">${user.username}</td>
        <td class="px-6 py-4 whitespace-nowrap text-base text-gray-600">${user.email}</td>
        <td class="px-6 py-4 whitespace-nowrap text-base text-gray-500" data-created-at="${user.createdAt}">
          ${new Date(user.createdAt).toLocaleDateString('en-GB')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-base text-blue-600">
          <a href="/accounts/${user._id}" class="text-blue-500 hover:underline">View</a>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-base text-center">
          ${banButton}
        </td>
      </tr>`;
        tbody.insertAdjacentHTML("beforeend", row);
      });
    }


   function updatePagination(currentPage, totalPages) {
      const paginationDiv = document.getElementById("pagination");
      paginationDiv.innerHTML = ""; // Xóa pagination cũ

      // Nút Previous
      if (currentPage > 1) {
        const prevButton = `
        <button
          class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100"
          onclick="fetchPage(${currentPage - 1})">
          Previous
        </button>`;
        paginationDiv.insertAdjacentHTML("beforeend", prevButton);
      }

      // Các nút số trang
      for (let i = 1; i <= totalPages; i++) {
        const button = `
        <button
          class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100"
          onclick="fetchPage(${i})"
          ${i === currentPage ? 'style="background-color: #e5e7eb;"' : ""}>
          ${i}
        </button>`;
        paginationDiv.insertAdjacentHTML("beforeend", button);
      }

      // Nút Next
      if (currentPage < totalPages) {
        const nextButton = `
        <button
          class="mx-1 px-4 py-2 border rounded-lg text-blue-600 hover:bg-blue-100"
          onclick="fetchPage(${currentPage + 1})">
          Next
        </button>`;
        paginationDiv.insertAdjacentHTML("beforeend", nextButton);
      }
    }

    function toggleBan(userId, shouldBan) {
        fetch(`/api/accounts/${userId}/ban`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ isBanned: shouldBan }),
        })
          .then(response => {
            if (response.ok) {
              alert(shouldBan ? 'User banned successfully' : 'User unbanned successfully');
              location.reload(); // Refresh the page to reflect the updated status
            } else {
              alert('Failed to update user status');
            }
          })
          .catch(error => console.error('Error:', error));
      }

</script>